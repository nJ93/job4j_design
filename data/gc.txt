1. Создать объект User c полями и переопределенным методом finalize

public class User {
  private String name;
  private int count;
  private boolean isActive;

  public User(String name, int count, boolean isActive) {
    this.name = name;
    this.count = count;
    this.isActive = isActive;
  }

  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public int getCount() {
    return count;
  }

  public void setCount(int count) {
    this.count = count;
  }

  public boolean isActive() {
    return isActive;
  }

  public void setActive(boolean active) {
    isActive = active;
  }

  @Override
  protected void finalize() throws Throwable {
    System.out.printf("Removed %s %d %s%n", name, count, isActive);
  }

  public static void main(String[] args) {
    for (int i = 0; i < 67000; i++) {
      new User("user", i, true);
    }
  }
}

2. Создать несколько объектов User и руками рассчитать сколько они будет занимать памяти

// 64-битная конфигурация
Для примера: 
new User("user", 1, true);
new User("user2", 2, true);

Первый объект:
1. Заголовок = 16 байт

2. String name = "user";
Заголовок = 16 байт
3 поля int = 12 байт
Ссылка на объект массива = 4 байта
+
Массив char[4]
Заголовок = 16 байт + 4 байта на длину массива
4 символа * 2 байта = 8 байт
Выравнивание для кратности 8 = 4 байта

3. int count = 1;
4 байта

4. boolean isActive = true;
1 бит

Итого ~ 88 байт


Второй объект:
1. Заголовок = 16 байт

2. String name = "user2";
Заголовок = 16 байт
3 поля int = 12 байт
Ссылка на объект массива = 4 байта
+
Массив char[5]
Заголовок = 16 байт + 4 байта на длину массива
5 символов * 2 байта = 10 байт
Выравнивание для кратности 8 = 2 байта

3. int count = 1;
4 байта

4. boolean isActive = true;
1 бит

Итого ~ 88 байт

3. Нужно найти информацию. Сколько памяти занимает пустой объект без полей.

Пустой объект без полей содержит только заголовок. Для 32-битной конфигурации - 8 байт, для 64-битной - 16 байт.

4. Добиться состояния, когда виртуальная машины вызывает сборщик мусора самостоятельно. За счет ключей xmx.

Ключ -Xmx5m. Запускался метод main в классе User в п.1

5. Объяснить поведение программы в текстовом файле.

По умолчанию размер Young generation по отношению к Old составляет 1/2. Т.е. Young - это 1/3 размера кучи, Old - 2/3.
Ключ -Xmx5m устанавливает максимальный размер кучи в 5 Мб. Т.е. Young generation занимает ~ 1.6 Мб. 
Eden space занимает примерно 90% от места в Young generation, т.е. ~ 1.5 Мб.
Объекты после создания попадают в Eden space. После того как Eden space заполняется, происходит minor GC и все объекты, не имеющие ссылок, подвергаются очистке и удаляются из памяти.

